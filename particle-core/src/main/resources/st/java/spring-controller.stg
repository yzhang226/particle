springController(po, request, response, biz, controller, options)
::= <<
package <controller.packageName>;

import <request.fullBeanName>;
import <response.fullBeanName>;
import <biz.fullBeanName>;
import <po.pk.fullBeanName>;

import com.fxtech.panda.core.common.DataResult;
import com.fxtech.panda.core.utils.DataResults;
import com.fxtech.panda.core.model.paging.PagingRequest;
import com.fxtech.panda.core.model.paging.PagingResponse;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<controller.requiredClassNames:{clazzName|import <clazzName>;};separator="\n">


/**
 * controller of <po.entityName> \<br>
 * Created by <options.username> on <options.currentDate>.
 */
@Validated
@RestController
@RequestMapping(value="/v1/<po.uriName>")
@Api(tags = "<po.entityName>")
public class <po.entityName>Controller {

    private static final Logger logger = LoggerFactory.getLogger(<po.entityName>Controller.class);

    @Autowired
    private <biz.beanName> <biz.uncapitalizeBeanName>;

    /**
     * 可以设置基础约束
     *
     * @param id
     * @return
     */
    @ApiOperation(tags = "<po.entityName>", value = "Get<po.entityName>ById", httpMethod = "GET",
                   notes = "通过主键获取<po.entityName>")
    @GetMapping("/get")
    public DataResult\<<response.beanName>\> getById(<po.pk.properties:{prop|@RequestParam <prop.propertyTypeName> <prop.propertyName>};separator=", ">) {
        <if(po.pk.multiplePk)>
        <po.pk.beanName> pk = new <po.pk.beanName>();
        <po.pk.properties:{prop|pk.set<prop.propertyNameUpperCamelCase>(<prop.propertyName>);};separator="\n">
        <response.beanName> ret = <biz.uncapitalizeBeanName>.getById(pk);
        <else>
        <response.beanName> ret = <biz.uncapitalizeBeanName>.getById(<po.pk.firstPkProperty.propertyName>);
        <endif>
        return DataResults.ok(ret);
    }

    /**
     * 新增
     *
     * @param request
     * @return 新增的数据的行主键(如果自增主键)
     */
    @ApiOperation(tags = "<po.entityName>", value = "Add<po.entityName>", httpMethod = "POST",
                   notes = "新增<po.entityName>")
    @PostMapping("/add")
    public DataResult\<<po.pk.beanName>\> add(@RequestBody <request.beanName> request) {
        return DataResults.ok(<biz.uncapitalizeBeanName>.save(request));
    }

    /**
     * 更新
     *
     * @param request
     * @return 影响数据表的行数
     */
    @ApiOperation(tags = "<po.entityName>", value = "Update<po.entityName>ById", httpMethod = "POST",
                   notes = "更新<po.entityName>")
    @PostMapping("/update")
    public DataResult\<Integer> update(@RequestBody <request.beanName> request) {
        return DataResults.ok(<biz.uncapitalizeBeanName>.update(request));
    }

    /**
     * 按条件, 分页查询
     *
     * @param request
     * @return 分页结果集
     */
    @ApiOperation(tags = "<po.entityName>", value = "Find<po.entityName>Paging", httpMethod = "POST",
                   notes = "分页查询<po.entityName>")
    @PostMapping("/find-page")
    public DataResult\<PagingResponse\<<response.beanName>\>> findPaging(@RequestBody PagingRequest\<<request.beanName>\> request) {
        return DataResults.ok(<biz.uncapitalizeBeanName>.findPaging(request));
    }


}

>>


